# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
import ast
import sys
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.ticker import MaxNLocator
import numpy as np

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\\frame0")

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def dash():
    dados_sensiveis_encontrados = load_data_from_txt('db\\base.txt', 'dados_sensiveis_encontrados')
    quantidade_por_tipo = load_data_from_txt('db\\base.txt', 'quantidade_por_tipo')
    criptografados = load_data_from_txt('db\\base.txt', 'criptografados')
    qntd_total = load_data_from_txt('db\\base.txt', 'qntd_total')
    tabela_de_arquivos = load_data_from_txt('db\\base.txt', 'tabela_de_arquivos')

    if not dados_sensiveis_encontrados or not quantidade_por_tipo or not criptografados or not qntd_total or not tabela_de_arquivos:
        messagebox.showerror("Erro", "Um ou mais conjuntos de dados estão vazios ou não foram encontrados. Por favor, execute a varredura novamente.")
        sys.exit(1)
    window = Tk()

    window.geometry("1000x550")
    window.configure(bg = "#1A1A1A")


    canvas = Canvas(
        window,
        bg = "#1A1A1A",
        height = 550,
        width = 1000,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)
    #global image_image_1
    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        500.0,
        36.0,
        image=image_image_1
    )

    canvas.create_text(
        81.0,
        17.0,
        anchor="nw",
        text="Finder DashBoard",
        fill="#FFFFFF",
        font=("Inter Bold", 30 * -1)
    )
    #global image_image_2
    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        43.0,
        36.0,
        image=image_image_2
    )

    #global image_image_3
    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        160.0,
        135.0,
        image=image_image_3
    )

    canvas.create_text(
        108.0,
        107.0,
        anchor="nw",
        text="Dados Sensíveis Encontrados\n",
        fill="#FFFFFF",
        font=("Inter Bold", 10 * -1)
    )

    canvas.create_text(
        127.0,
        129.0,
        anchor="nw",
        text=f"{sum(dados_sensiveis_encontrados.values())} Dados", #Imprime a soma de todos os valores do dicionário
        fill="#FFFFFF",
        font=("Inter Bold", 22 * -1)
    )

    #global image_image_4
    image_image_4 = PhotoImage(
        file=relative_to_assets("image_4.png"))
    image_4 = canvas.create_image(
        500.0,
        135.0,
        image=image_image_4
    )

    #global image_image_5
    image_image_5 = PhotoImage(
        file=relative_to_assets("image_5.png"))
    image_5 = canvas.create_image(
        160.0,
        364.0,
        image=image_image_5
    )

    #global image_image_6
    image_image_6 = PhotoImage(
        file=relative_to_assets("image_6.png"))
    image_6 = canvas.create_image(
        500.0,
        364.0,
        image=image_image_6
    )

    #global image_image_7
    image_image_7 = PhotoImage(
        file=relative_to_assets("image_7.png"))
    image_7 = canvas.create_image(
        840.0,
        364.0,
        image=image_image_7
    )

    canvas.create_text(
        460.0,
        129.0,
        anchor="nw",
        text=f"{len(tabela_de_arquivos)} Arquivos",
        fill="#FFFFFF",
        font=("Inter Bold", 22 * -1)
    )

    canvas.create_text(
        469.0,
        107.0,
        anchor="nw",
        text="Arquivos Verificados",
        fill="#FFFFFF",
        font=("Inter Bold", 10 * -1)
    )

    #global image_image_8
    image_image_8 = PhotoImage(
        file=relative_to_assets("image_8.png"))
    image_8 = canvas.create_image(
        68.0,
        135.0,
        image=image_image_8
    )

    #global image_image_9
    image_image_9 = PhotoImage(
        file=relative_to_assets("image_9.png"))
    image_9 = canvas.create_image(
        840.0,
        135.0,
        image=image_image_9
    )

    canvas.create_text(
        801.0,
        107.0,
        anchor="nw",
        text="Arquivos Criptografados",
        fill="#FFFFFF",
        font=("Inter Bold", 10 * -1)
    )

    canvas.create_text(
        800.0,
        129.0,
        anchor="nw",
        text=f"{len(criptografados)} Arquivos",
        fill="#FFFFFF",
        font=("Inter Bold", 22 * -1)
    )

    #global image_image_10
    image_image_10 = PhotoImage(
        file=relative_to_assets("image_10.png"))
    image_10 = canvas.create_image(
        748.0,
        135.0,
        image=image_image_10
    )

    #global image_image_11
    image_image_11 = PhotoImage(
        file=relative_to_assets("image_11.png"))
    image_11 = canvas.create_image(
        408.0,
        135.0,
        image=image_image_11
    )

    fig_1 = Figure(figsize=(2.5, 2.2), facecolor='#15375C')
    ax_1 = fig_1.add_subplot()
    ax_1.set_facecolor('#15375C')
    #ax_1.fill_between(x=dados_sensiveis_encontrados.keys(), y1=dados_sensiveis_encontrados.values(), color='#807FB3')
    #ax_1.fill_between(x=dados_sensiveis_encontrados.keys(), y1=dados_sensiveis_encontrados.values(), alpha=0.7)
    ax_1.fill_between(x=list(dados_sensiveis_encontrados.keys()), y1=list(dados_sensiveis_encontrados.values()), alpha=0.7)
    ax_1.tick_params(labelsize=6, colors='white')
    fig_1.autofmt_xdate()
    ax_1.plot(list(dados_sensiveis_encontrados.keys()), list(dados_sensiveis_encontrados.values()), color='deepskyblue')
    ax_1.grid(visible=True)

    canvas = FigureCanvasTkAgg(figure=fig_1, master=window)
    canvas.draw()
    canvas.get_tk_widget().place(x=30, y=240)


    # Segundo gráfico (horizontal)
    fig_2 = Figure(figsize=(2.5, 2.2), facecolor='#15375C')
    ax_2 = fig_2.add_subplot()
    ax_2.set_facecolor('#15375C')

    categorias = list(quantidade_por_tipo.keys())
    valores = list(quantidade_por_tipo.values())

    y_pos = np.arange(len(categorias))

    ax_2.barh(y_pos, valores, align='center', color='#356B9E', edgecolor='deepskyblue', linewidth=1.5, alpha=0.7)
    ax_2.set_yticks(y_pos, labels=categorias)
    ax_2.invert_yaxis() 
    ax_2.tick_params(labelsize=6.5, colors='white')
    ax_2.grid(visible=True)

    # Forçar o número máximo de intervalos no eixo y a ser um número inteiro
    ax_2.xaxis.set_major_locator(MaxNLocator(integer=True))

    fig_2.autofmt_xdate() 
    canvas = FigureCanvasTkAgg(figure=fig_2, master=window)
    canvas.draw()
    canvas.get_tk_widget().place(x=720, y=240)

    # Terceiro gráfico (Tabela)
    table_coluna=["Arquivo", "Criptografado"]
    table = ttk.Treeview(master=window, columns=table_coluna, show="headings")

    for column in table_coluna:
        table.heading(column=column, text=column)
        table.column(column, width=125)

    # Centralizando o texto da segunda coluna
    table.column("Criptografado", anchor='center')

    for row_data in tabela_de_arquivos:
        table.insert(parent="", index="end", values=row_data)


    # Cria a barra de rolagem
    #scrollbar = ttk.Scrollbar(window, orient="vertical", command=table.yview)
    #scrollbar.place(x=625, y=230, height=260)
    # Configura a tabela para usar a barra de rolagem
    #table.configure(yscrollcommand=scrollbar.set)

    table.place(x=375, y=230, height=260)

    style = ttk.Style()
    style.theme_use("default")
    style.configure("Treeview", background="#23518D", fieldbackground="#23518D", foreground="white")
    style.configure("Treeview.Heading", background="#23518D", fieldbackground="#23518D", foreground="white")
    style.map("Treeview", background=[('selected', '#A1A6F9')])
    style.configure("Treeview", font=("Inter", 8))

    window.title("CyberShield Finder Dashboard")
    window.resizable(False, False)
    window.mainloop()

def load_data_from_txt(caminho_arquivo, nome_variavel):
  with open(caminho_arquivo, 'r', encoding='utf-8') as arquivo:
    for linha in arquivo:
      if linha.startswith(nome_variavel + ' ='):
        valor = ast.literal_eval(linha.partition('=')[2])
        return valor
  return None  # Retorna None se a variável não for encontrada

if __name__ == "__main__":
    dash()